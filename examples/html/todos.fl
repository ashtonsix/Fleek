import DOM, {div, button} from 'dom'

let createStore \(reducer), (
  let subscribers <- {}
  let state
  {
    dispatch: \(action), (
      (action, state) -> reducer -> @state
      subscribers.map \(_ state)
      return action
    ),
    getState: \(state),
    subscribe: \(cb), (
      let key <- random()
      subscribers.(key) <- cb
      return \(), (delete subscribers.(key))
    )
  } -> return
)

let store <- createStore \(action, state []), (
  let replaceTodo <- \(todo, i), (
    return state.(:i:{todo ? todo}:i+1:))

  switch (action.type, {
    ADD_TODO: return state.(:{action.payload})
    REMOVE_TODO: return replaceTodo (false, action.payload)
    TOGGLE_TODO: return (
      state[action.payload] ->
      \({value: _.value, done: !_.done}) ->
      toggleTodo (_, action.payload)
    )
  })
)

let Todo <- \({value, done, index}), (
  div
    input {
      type: 'checkbox',
      onChange: \(store.dispatch ({type: 'TOGGLE_TODO', payload: i})),
    }
    span ({[!todo.done ? 'style']: {textDecoration: 'line-through'}} todo.value)
    button {
      onClick: \(store.dispatch ({type: 'REMOVE_TODO', payload: i})),
    } 'Delete'
)

let render \(state), (
  @Dom.query#(`body`) <-
    div
      input {
        placeholder: 'What needs to be done?',
        onKeyDown: \(_.keyCode == 13 && store.dispatch ({type: 'ADD_TODO', payload: _.target.value})),
      }
      state.map(\(todo, index), (
        Todo {...todo, index}
      ))
)

render store.getState()
store.subscribe (render _)
